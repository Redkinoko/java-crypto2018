/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import core.Cards;
import core.Encoder;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.System.exit;
import javax.swing.border.TitledBorder;
import java.awt.AWTException;
import java.awt.HeadlessException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Red
 */
public class App extends javax.swing.JFrame {
    
    private Cards cards;
    private Encoder encoder;
    private CardViewer cardViewer;
    private TitledBorder messageBorder;

    public App(Cards cards, Encoder encoder, CardViewer cv) {
        initComponents();
        this.cards      = cards;
        this.encoder    = encoder;
        cardViewer = cv;
        setCardViewer(cv);
        messageBorder = new TitledBorder("MODE PAS A PAS");
        messageBorder.setTitleJustification(TitledBorder.CENTER);
        messageBorder.setTitlePosition(TitledBorder.TOP);
    }
    
    private void setCardViewer(CardViewer cv)
    {
        this.cardViewer = cv;
        this.jPanelCenter.add(cv);
        int w = (this.getWidth() + cv.getPreferredSize().width);//171
        int h = (this.getHeight() + cv.getPreferredSize().height);//144

        Dimension d = new Dimension(w, h);
        this.jPanelCenter.setPreferredSize(d);
        this.jPanelCenter.setMinimumSize(d);
        
        Dimension d2 = new Dimension(w + this.getMinimumSize().width, h + this.getMinimumSize().height + 15);
        this.setMinimumSize(d2);
        this.setPreferredSize(d2);
    }
    
    private String cleanString(String in)
    {
        return in.replaceAll("[^a-zA-Z]", "").toUpperCase();
    }
    
    @Override
    public void repaint()
    {
        super.repaint();
        cardViewer.repaint();
    }
    
    public static void copy(String text)
    {
        Clipboard clipboard = getSystemClipboard();
        clipboard.setContents(new StringSelection(text), null);
    }

    public static String ClipboardGet() throws Exception
    {
        Clipboard systemClipboard = getSystemClipboard();
        DataFlavor dataFlavor = DataFlavor.stringFlavor;

        if (systemClipboard.isDataFlavorAvailable(dataFlavor))
        {
            Object text = systemClipboard.getData(dataFlavor);
            return (String) text;
        }

        return null;
    }

    private static Clipboard getSystemClipboard()
    {
        Toolkit defaultToolkit = Toolkit.getDefaultToolkit();
        Clipboard systemClipboard = defaultToolkit.getSystemClipboard();

        return systemClipboard;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelCenter = new javax.swing.JPanel();
        jPanelMessages = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        encryptButton = new javax.swing.JButton();
        textToEncrypt = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        encryptedText = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        decryptButton = new javax.swing.JButton();
        textToDecrypt = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        decryptedText = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        menuShowSeed = new javax.swing.JMenuItem();
        menuLoadSeed = new javax.swing.JMenuItem();
        menuQuitter = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuLoadBackup = new javax.swing.JMenuItem();
        menuSteptoStep = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuNaturalMix = new javax.swing.JMenuItem();
        menuColorMix = new javax.swing.JMenuItem();
        menuValueMix = new javax.swing.JMenuItem();
        menuRandomMix = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1, 1));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanelCenter.setMinimumSize(new java.awt.Dimension(1, 1));
        jPanelCenter.setPreferredSize(new java.awt.Dimension(1, 1));
        jPanelCenter.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelMessages.setLayout(new java.awt.GridLayout(4, 1, 1, 1));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Message à chiffrer"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        encryptButton.setText("Chiffrer");
        encryptButton.setMaximumSize(new java.awt.Dimension(81, 23));
        encryptButton.setMinimumSize(new java.awt.Dimension(81, 23));
        encryptButton.setPreferredSize(new java.awt.Dimension(105, 23));
        encryptButton.setRequestFocusEnabled(false);
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });
        jPanel7.add(encryptButton, java.awt.BorderLayout.LINE_END);

        textToEncrypt.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.add(textToEncrypt, java.awt.BorderLayout.CENTER);

        jPanelMessages.add(jPanel7);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Message chiffré"));
        jPanel6.setLayout(new java.awt.BorderLayout());

        encryptedText.setEditable(false);
        jPanel6.add(encryptedText, java.awt.BorderLayout.CENTER);

        jPanelMessages.add(jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Message à déchiffrer"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        decryptButton.setText("Déchiffrer");
        decryptButton.setPreferredSize(new java.awt.Dimension(105, 25));
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });
        jPanel5.add(decryptButton, java.awt.BorderLayout.LINE_END);
        jPanel5.add(textToDecrypt, java.awt.BorderLayout.CENTER);

        jPanelMessages.add(jPanel5);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Message déchiffré"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        decryptedText.setEditable(false);
        jPanel8.add(decryptedText, java.awt.BorderLayout.CENTER);

        jPanelMessages.add(jPanel8);

        jPanel1.add(jPanelMessages, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Fichier");

        jMenu4.setText("Seed");

        menuShowSeed.setText("Voir");
        menuShowSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowSeedActionPerformed(evt);
            }
        });
        jMenu4.add(menuShowSeed);

        menuLoadSeed.setText("Charger");
        menuLoadSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadSeedActionPerformed(evt);
            }
        });
        jMenu4.add(menuLoadSeed);

        jMenu1.add(jMenu4);

        menuQuitter.setText("Quitter");
        menuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitterActionPerformed(evt);
            }
        });
        jMenu1.add(menuQuitter);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Etapes");

        menuLoadBackup.setText("Paquet initial");
        menuLoadBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadBackupActionPerformed(evt);
            }
        });
        jMenu2.add(menuLoadBackup);

        menuSteptoStep.setText("Pas à pas");
        menuSteptoStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSteptoStepActionPerformed(evt);
            }
        });
        jMenu2.add(menuSteptoStep);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Mélanger");

        menuNaturalMix.setText("Naturel");
        menuNaturalMix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNaturalMixActionPerformed(evt);
            }
        });
        jMenu3.add(menuNaturalMix);

        menuColorMix.setText("Couleur");
        menuColorMix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuColorMixActionPerformed(evt);
            }
        });
        jMenu3.add(menuColorMix);

        menuValueMix.setText("Valeur");
        menuValueMix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuValueMixActionPerformed(evt);
            }
        });
        jMenu3.add(menuValueMix);

        menuRandomMix.setText("Aléatoire");
        menuRandomMix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRandomMixActionPerformed(evt);
            }
        });
        jMenu3.add(menuRandomMix);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        String tmp = cleanString(textToEncrypt.getText());
        this.textToEncrypt.setText(tmp);
        if(!tmp.equals(""))
        {
            tmp = encoder.encrypt(tmp);
            this.encryptedText.setText(tmp);
        }
        this.cardViewer.repaint();
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        String tmp = cleanString(textToDecrypt.getText());
        this.textToDecrypt.setText(tmp);
        if(!tmp.equals(""))
        {
            tmp = encoder.decrypt(tmp);
            this.decryptedText.setText(tmp);
        }
        this.cardViewer.repaint();
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void menuColorMixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuColorMixActionPerformed
        this.cards.colorMix();
        this.cardViewer.repaint();
    }//GEN-LAST:event_menuColorMixActionPerformed

    private void menuValueMixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuValueMixActionPerformed
        this.cards.valueMix();
        this.cardViewer.repaint();
    }//GEN-LAST:event_menuValueMixActionPerformed

    private void menuRandomMixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRandomMixActionPerformed
        this.cards.randomMix();
        this.cardViewer.repaint();
    }//GEN-LAST:event_menuRandomMixActionPerformed

    private void menuNaturalMixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNaturalMixActionPerformed
        this.cards.naturalMix();
        this.cardViewer.repaint();
    }//GEN-LAST:event_menuNaturalMixActionPerformed

    private void menuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitterActionPerformed
        exit(0);
    }//GEN-LAST:event_menuQuitterActionPerformed

    private void menuSteptoStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSteptoStepActionPerformed
        if(this.menuSteptoStep.isSelected())
        {
            this.jPanel1.setBorder(messageBorder);
        }
        else
        {
            this.jPanel1.setBorder(null);
        }
        repaint();
    }//GEN-LAST:event_menuSteptoStepActionPerformed

    private void menuLoadBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadBackupActionPerformed
        this.cards.loadBackup();
        this.cardViewer.repaint();
    }//GEN-LAST:event_menuLoadBackupActionPerformed

    private void menuLoadSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadSeedActionPerformed
        SeedViewer sv = new SeedViewer("Charger une seed", "Coller", "Charger");
        sv.button1.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                try 
                {
                    sv.jText.setText(ClipboardGet());
                }
                catch (Exception ex)
                {
                    
                }
            }
        });
        sv.button2.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                String seed = sv.jText.getText();
                if(seed.equals(""))
                {
                    sv.jNoti.setText("La seed ne peut pas être vide!");
                }
                else
                {
                    if(encoder.validateSeed(seed))
                    {
                        encoder.decodeSeed(seed);
                        repaint();
                        sv.dispose();
                    }
                    else
                    {
                        sv.jNoti.setText("La seed est incorrect!");
                    }
                    
                }
            }
        });
        sv.setVisible(true);
    }//GEN-LAST:event_menuLoadSeedActionPerformed

    private void menuShowSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowSeedActionPerformed
        String seed = encoder.generateSeed();
        SeedViewer sv = new SeedViewer("Voir la seed", "Copier", "Ok");
        sv.jText.setText(seed);
        sv.button1.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                copy(seed);
                sv.jNoti.setText("Copié dans le presse-papier!");
            }
        });
        sv.button2.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                sv.dispose();
            }
        });
        sv.setVisible(true);
    }//GEN-LAST:event_menuShowSeedActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryptButton;
    private javax.swing.JTextField decryptedText;
    private javax.swing.JButton encryptButton;
    private javax.swing.JTextField encryptedText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelMessages;
    private javax.swing.JMenuItem menuColorMix;
    private javax.swing.JMenuItem menuLoadBackup;
    private javax.swing.JMenuItem menuLoadSeed;
    private javax.swing.JMenuItem menuNaturalMix;
    private javax.swing.JMenuItem menuQuitter;
    private javax.swing.JMenuItem menuRandomMix;
    private javax.swing.JMenuItem menuShowSeed;
    private javax.swing.JCheckBoxMenuItem menuSteptoStep;
    private javax.swing.JMenuItem menuValueMix;
    private javax.swing.JTextField textToDecrypt;
    private javax.swing.JTextField textToEncrypt;
    // End of variables declaration//GEN-END:variables
}
